# context-insensitive pointer analysis with call graph construction
# name=pa-dlog

.include "T.dom"
.include "F.dom"
.include "M.dom"
.include "I.dom"
.include "H.dom"
.include "V.dom"
.include "Z.dom"

.bddvarorder F0_I0xM0xM1_T0_V0xV1_T1_H0_H1_Z0

###
# Input/Output Relations
###

VHfilter(v:V0,h:H0) input
HT(h:H0,t:T1) input
cha(n:M1,t:T1,m:M0) input
sub(t1:T1,t2:T0) input
MmethArg(m:M0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
IinvkArg(i:I0,n:Z0,v:V1) input
IinvkRet(i:I0,n:Z0,v:V0) input
MI(m:M0,i:I0) input
statIM(i:I0,m:M0) input
specIM(i:I0,m:M0) input
virtIM(i:I0,m:M0) input
MobjValAsgnInst(m:M0,l:V0,h:H0) input
MobjVarAsgnInst(m:M0,l:V0,r:V1) input
MgetInstFldInst(m:M0,l:V0,f:F0,b:V1) input
MputInstFldInst(m:M0,b:V0,f:F0,r:V1) input
MgetStatFldInst(m:M0,l:V0,f:F0) input
MputStatFldInst(m:M0,f:F0,r:V0) input
clinitM(m:M0) input

VH(v:V0,h:H0) output
FH(f:F0,h:H0) output
HFH(h1:H0,f:F0,h2:H1) output
IM(i:I0,m:M0) output

###
# Intermediate Relations
###

Reachable(m:M0) output
Reachable(0).
Reachable(m) :- Reachable(m1), MI(m1, i), IM(i, m).
# cs265: declare any relations here that you want to store
# intermediate results.  Qualify them as output relations
# (just as VH, FH, HFH, and IM above) so that you can debug
# their contents.  Alternatively, you can leave them
# unqualified.

###
# Constraints
###

# v = new h
VH(v,h) :- Reachable(m), MobjValAsgnInst(m,v,h), VHfilter(v,h).
# v = v2
VH(v,h) :- Reachable(m), MobjVarAsgnInst(m,v,v2), VH(v2,h), VHfilter(v,h).
# v = b.f
VH(v,h) :- Reachable(m), MgetInstFldInst(m,v,f,b), VH(b,h1), HFH(h1,f,h), VHfilter(v,h).
# b.f = v2
HFH(h1,f,h2) :- Reachable(m), MputInstFldInst(m,b,f,v2), VH(b,h1), VH(v2,h2).
# f = v
FH(f,h) :- Reachable(m), MputStatFldInst(m,f,v), VH(v,h).
# v = f
VH(v,h) :- Reachable(m), MgetStatFldInst(m,v,f), FH(f,h), VHfilter(v,h).

# Constraint 7.
# Arguments
VH(v,h) :- Reachable(m1), MI(m1,i), IinvkArg(i,n,v1), VH(v1,h), IM(i,m2), MmethArg(m2,n,v), VHfilter(v,h).
# Return Values
VH(v,h) :- Reachable(m1), MI(m1,i), IinvkRet(i,n,v), IM(i,m2), MmethRet(m2, n, v2), VH(v2,h), VHfilter(v,h).
#MmethArg(m:M0,n:Z0,v:V0) input
#MmethRet(m:M0,n:Z0,v:V1) input
#IinvkArg(i:I0,n:Z0,v:V1) input
#IinvkRet(i:I0,n:Z0,v:V0) input

IM(i,m) :- statIM(i,m).
IM(i,m) :- specIM(i,m).
#IM(i,m) :- virtIM(i,m).
IM(i,m) :- virtIM(i,mc),IinvkArg(i,0,v),VH(v,h),HT(h,t),cha(mc,t,m).
#IM(i,m) :- virtIM(i,mc), cha(mc, _, m).

# cs265: write Datalog rules here specifying how to compute
# output relations from the input relations


